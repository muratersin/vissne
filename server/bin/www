#!/usr/bin/env node

const http = require('http');
const dotenv = require('dotenv');

const env = (process.env.NODE_ENV || 'development').trim();

if (env !== 'production') {
  dotenv.config();
}

const app = require('../app');
const logger = require('../lib/logger');
const bootstrap = require('../lib/bootstrap');

const { MOVIE_DB_API_KEY, JWTSECRET, PORT } = process.env;

if (!MOVIE_DB_API_KEY || !JWTSECRET) {
  logger.fatal('Api key and jtw secret are required.');
  setTimeout(() => process.exit(1), 2000);
}

/**
 * Normalize a port into a number, string, or false and
 * get port from environment and store in Express.
 */

const port = ((val) => {
  const parsedPort = parseInt(val, 10);

  if (Number.isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // parsedPort number
    return parsedPort;
  }

  return false;
})(PORT || '3000');

app.set('port', port);

const server = http.createServer(app);

server.listen(port);

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.fatal(`${bind} requires elevated privileges`);
      break;
    case 'EADDRINUSE':
      logger.fatal(`${bind} is already in use`);
      break;
    default:
      logger.fatal(error);
      break;
  }

  setTimeout(() => process.exit(1), 2000);
});

server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  logger.info(`Listening on ${bind}`);

  // procces of runtime arguments
  bootstrap();
});
